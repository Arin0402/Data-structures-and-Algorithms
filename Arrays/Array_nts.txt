1. Declare empty 2d vector = vector<vector<int> > arr(4, vector<int>(4, 0));

2. a x b = LCM(a, b) * GCD (a, b)

3. 1<<k is same as 2^k    

4. the “comparator” function returns a value; convertible to bool, which basically tells us whether the passed    “first” argument
  should be placed before the passed “second” argument or not. 

5. sort the matrix column wise

  void sortrows(vector<vector<int>>& matrix, int col) {    
    std::sort(matrix.begin(), matrix.end(), [col](const vector<int>& lhs, const vector<int>& rhs) {
              return lhs[col] > rhs[col];})
  }

6. Comparator for min heap priority queue

  class myComparator
  {
  public:
      bool operator()(Node* a, Node* b){
          return a->data > b->data;
      }
  };

  priority_queue<Node* , vector<Node*> , myComparator> pq;

7. use of more than one data type in priority queue. (Heap 007)

  priority_queue<pair<int, char>> pq;

  ANOTHER method

  struct Key {

    int freq; 
    char ch;
    
    bool operator<(const Key& k) const
    {
        return freq < k.freq;
    }
  };