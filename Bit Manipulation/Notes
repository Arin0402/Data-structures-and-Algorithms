1.  10 >> 3 = 10 / 2^3
2. 10 << 3 = 10 * 2^3
3. swap two numbers a, b using bit man.

    a = a^b  ( ^ is xor)
    b = a^b
    a = a^b

4. find the value of xor of all the numbers between 1 to n.

    - O(1) solution
    - write xor for each n starting from 1
    - we will observe a pattern

    - if(n%4 == 0) print n
    - else if(n%4 == 1) print(1)
    - else if(n%4 == 2) print(n + 1)
    - else if(n%4 == 3) print(0)

5. find the value of xor of all the numbers in range l and r.
    
    - O(1) solution
    - step 1 -> find xor of all the elements between 1 to r.
    - step 2 -> find xor of all the elements between 1 to l-1.
    - step 3 -> xor both values as it will cancel the duplicates.

6. clear ith bit of a number.
    
    - n & ~(1 << i)

7. Remove the first set bit from the right.

    - ex :- 1101 -> 1100

    - n & (n-1)

8. check if a number is a power of two.
    
    - if n & (n-1) == 0. then yes, else no

9. Get the rightmost setbit of a number
    - n & ~(n - 1)