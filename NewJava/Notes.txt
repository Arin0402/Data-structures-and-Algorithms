- Java is platform indepenmdent, it requires only JVM. The machine which have JVM can run the java code but JVM itself is platform dependent. Like we cannot run jvm on IOS

- Key Differences bwetween the compilation of Java and cpp

    Intermediate Representation:

    - C++ compiles directly to machine code specific to the target architecture.
    - Java compiles to bytecode, an intermediate form that is platform-independent and executed by the JVM.

    Portability:

    - C++ executables are platform-dependent; you need to recompile the source code for different platforms.
    - Java bytecode is platform-independent and can run on any system with a compatible JVM.

    Execution:

    - C++ code is executed directly by the operating system as a standalone application.
    - Java code runs within the JVM, providing an additional layer of abstraction and security.

    Performance:

    - C++ often has better performance since it compiles directly to machine code.
    - Java's performance can be slightly lower due to the overhead of the JVM, although JIT compilation can optimize performance during execution.
    - The JVM includes a Just-In-Time (JIT) compiler that translates bytecode into native machine code at runtime.

- command to compile a java file -> javac FILE_NAME.java
- command to run byte code -> java CLASS_NAME
- NOTE: filename and class name can be different. we compile using file name and we riun the compiled code using classname

- Java Virtual Machine (JVM)
    The JVM is an abstract computing machine that enables a computer to run a Java program. It provides the environment in which Java bytecode can be executed.

- Java Runtime Environment (JRE)
    The JRE is a package of software that provides the necessary runtime libraries to execute Java programs. It includes the JVM, along with libraries and other components to run applications written in Java.
    Pre-compiled classes that Java programs can use. These include core libraries like java.lang, java.util, java.io, etc.

- Java Development Kit (JDK): 
    A superset of the JRE. It includes everything in the JRE, plus tools for developing, debugging, and monitoring Java applications (e.g., javac, javadoc, jdb).

- Primitive data types - predefined data types 
    
    - Integer - byte(1), short(2), int(4), long(8)
    - Float - float(4), double(8)
    - Character - char(2)
    - Boolean

    - by default java supports double

    - we have to specify values for some datatypes, otherwise it would throw error
    - long a = 123l;
    - float a = 5.8f;

    - Type promotion
        
        byte a = 10
        byte b = 30

        int res = a*b;

        (here a*b goes out of the byte range so java allows us to assign it to intetger)